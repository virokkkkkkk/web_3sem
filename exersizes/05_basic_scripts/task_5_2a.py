# -*- coding: utf-8 -*-
"""
Задание 5.2a

Всё, как в задании 5.2, но, если пользователь ввел адрес хоста, а не адрес сети,
надо преобразовать адрес хоста в адрес сети и вывести адрес сети и маску, как в задании 5.2.

Пример адреса сети (все биты хостовой части равны нулю):
* 10.0.1.0/24
* 190.1.0.0/16

Пример адреса хоста:
* 10.0.1.1/24 - хост из сети 10.0.1.0/24
* 10.0.5.195/28 - хост из сети 10.0.5.192/28

Если пользователь ввел адрес 10.0.1.1/24,
вывод должен быть таким:

Network:
10        0         1         0
00001010  00000000  00000001  00000000

Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000

Проверить работу скрипта на разных комбинациях хост/маска, например:
    10.0.5.195/28, 10.0.1.1/24

Подсказка:
Есть адрес хоста в двоичном формате и маска сети 28. Адрес сети это первые 28 бит адреса хоста + 4 ноля.
То есть, например, адрес хоста 10.1.1.195/28  в двоичном формате будет
bin_ip = "00001010000000010000000111000011"

А адрес сети будет первых 28 символов из bin_ip + 0000 (4 потому что всего в адресе может быть 32 бита, а 32 - 28 = 4)
00001010000000010000000111000000

Ограничение: Все задания надо выполнять используя только пройденные темы.

"""
# enter = input('Введите ip адрес в формате 10.1.1.0/24:')

# адрес сети
# enter = '10.1.1.0/24'
# адрес хоста
# enter = '10.1.1.1/24'
enter = '10.40.25.56/20'

mask = enter.split('/')[-1]
ip = enter.split('/')[0]
ip = ip.split('.')

# Двоичная маска без пробелов
mask = int(mask)
m = '1'*+mask+'0'*(32-mask)
# print('m = ' + m)

# выводим адрес сети:
print('Network:')

# вывод нового адреса сети
# и формируем новый ip
j = 0
new_ip = []
for i in ip:
	mask_dec = int(m[8*j:8*(j+1)], base=2)
	# побитовое умножение маски и ip
	buf = str(int(i) & mask_dec)
	print(f'{buf}{" "*(10-len(buf))}', end='')
	new_ip.append(int(buf))
	j+=1
print()

for i in new_ip:
	buf = (bin(int(i))).replace('0b','')
	e = 8 - len(buf)
	print(f'{"0" * e}{buf}  ', end='')
print()
print()

print('Mask:')
print('/'+str(mask)+':')

for i in range(4):
	mask_dec = int(m[8*i:8*(i+1)], base=2)
	e = 10 - len(str(mask_dec))
	print(f'{str(mask_dec) + " "*e}', end='')
print()
for i in range(4):
	print(m[8*i:8*(i+1)] + ' '*2, end='')